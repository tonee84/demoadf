{
	"name": "scd1HashDF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SQLprodnohash2",
						"type": "DatasetReference"
					},
					"name": "sqlprodNoHash"
				},
				{
					"dataset": {
						"referenceName": "SQLStagewHash",
						"type": "DatasetReference"
					},
					"name": "SQLstagewHash"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQLStagewHash",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "createHash"
				},
				{
					"name": "exists"
				},
				{
					"name": "lookupDates"
				},
				{
					"name": "setAttributes"
				},
				{
					"name": "alterRows"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ProductID as integer,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          Color as string,",
				"          StandardCost as decimal(19,4),",
				"          ListPrice as decimal(19,4),",
				"          Size as string,",
				"          Weight as decimal(8,2),",
				"          ProductCategoryID as integer,",
				"          ProductModelID as integer,",
				"          SellStartDate as timestamp,",
				"          SellEndDate as timestamp,",
				"          DiscontinuedDate as timestamp,",
				"          ThumbNailPhoto as binary,",
				"          ThumbnailPhotoFileName as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sqlprodNoHash",
				"source(output(",
				"          ProductID as integer,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          Color as string,",
				"          StandardCost as decimal(19,4),",
				"          ListPrice as decimal(19,4),",
				"          {_LastUpdated} as timestamp,",
				"          DWhash as string,",
				"          {_Inserted} as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SQLstagewHash",
				"sqlprodNoHash derive({hash key} = sha1(Name,ProductNumber,Color)) ~> createHash",
				"createHash, SQLstagewHash exists({hash key} == DWhash,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists",
				"exists, SQLstagewHash lookup(sqlprodNoHash@ProductID == SQLstagewHash@ProductID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupDates",
				"lookupDates derive(Inserted = currentTimestamp(),",
				"          Updated = iif (isNull({_LastUpdated}),currentTimestamp(),{_LastUpdated})) ~> setAttributes",
				"setAttributes alterRow(upsertIf(true())) ~> alterRows",
				"alterRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ProductID as integer,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          Color as string,",
				"          StandardCost as decimal(19,4),",
				"          ListPrice as decimal(19,4),",
				"          {_LastUpdated} as timestamp,",
				"          DWhash as string,",
				"          {_Inserted} as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['ProductID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ProductID = sqlprodNoHash@ProductID,",
				"          Name = sqlprodNoHash@Name,",
				"          ProductNumber = sqlprodNoHash@ProductNumber,",
				"          Color = sqlprodNoHash@Color,",
				"          StandardCost = sqlprodNoHash@StandardCost,",
				"          ListPrice = sqlprodNoHash@ListPrice,",
				"          {_LastUpdated} = Updated,",
				"          DWhash = {hash key},",
				"          {_Inserted}",
				"     )) ~> sink1"
			]
		}
	}
}